// Code generated by counterfeiter. DO NOT EDIT.
package collectorpbfakes

import (
	"sync"

	"github.com/lightstep/lightstep-tracer-go/collectorpb"
	"golang.org/x/net/context"
)

type FakeCollectorServiceServer struct {
	ReportStub        func(context.Context, *collectorpb.ReportRequest) (*collectorpb.ReportResponse, error)
	reportMutex       sync.RWMutex
	reportArgsForCall []struct {
		arg1 context.Context
		arg2 *collectorpb.ReportRequest
	}
	reportReturns struct {
		result1 *collectorpb.ReportResponse
		result2 error
	}
	reportReturnsOnCall map[int]struct {
		result1 *collectorpb.ReportResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCollectorServiceServer) Report(arg1 context.Context, arg2 *collectorpb.ReportRequest) (*collectorpb.ReportResponse, error) {
	fake.reportMutex.Lock()
	ret, specificReturn := fake.reportReturnsOnCall[len(fake.reportArgsForCall)]
	fake.reportArgsForCall = append(fake.reportArgsForCall, struct {
		arg1 context.Context
		arg2 *collectorpb.ReportRequest
	}{arg1, arg2})
	fake.recordInvocation("Report", []interface{}{arg1, arg2})
	fake.reportMutex.Unlock()
	if fake.ReportStub != nil {
		return fake.ReportStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.reportReturns.result1, fake.reportReturns.result2
}

func (fake *FakeCollectorServiceServer) ReportCallCount() int {
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	return len(fake.reportArgsForCall)
}

func (fake *FakeCollectorServiceServer) ReportArgsForCall(i int) (context.Context, *collectorpb.ReportRequest) {
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	return fake.reportArgsForCall[i].arg1, fake.reportArgsForCall[i].arg2
}

func (fake *FakeCollectorServiceServer) ReportReturns(result1 *collectorpb.ReportResponse, result2 error) {
	fake.ReportStub = nil
	fake.reportReturns = struct {
		result1 *collectorpb.ReportResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCollectorServiceServer) ReportReturnsOnCall(i int, result1 *collectorpb.ReportResponse, result2 error) {
	fake.ReportStub = nil
	if fake.reportReturnsOnCall == nil {
		fake.reportReturnsOnCall = make(map[int]struct {
			result1 *collectorpb.ReportResponse
			result2 error
		})
	}
	fake.reportReturnsOnCall[i] = struct {
		result1 *collectorpb.ReportResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCollectorServiceServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCollectorServiceServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ collectorpb.CollectorServiceServer = new(FakeCollectorServiceServer)
